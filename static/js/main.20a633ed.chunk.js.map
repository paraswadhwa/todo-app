{"version":3,"sources":["components/InputForm.jsx","components/Tasks.jsx","components/TodoList.jsx","components/TodoBucket.jsx","constants/actionTypes.js","actions/index.js","containers/TodoContainer.jsx","components/App.js","reducers/todoReducer.js","reducers/rootReducer.js","store/index.js","provider/index.js","index.js"],"names":["InputForm","onSubmit","event","preventDefault","newItemValue","refs","itemName","value","onValueChange","props","form","reset","this","focus","buttonText","ref","className","type","placeholder","React","Component","Tasks","items","bucketIndex","markTodoDone","removeItem","itemsElement","map","item","i","todoClass","done","aria-hidden","onClick","class","TodoList","bucket","addItem","id","TodoBucket","addBucket","bucketName","addBucketDispatch","name","setState","selectedBucketIndex","addTaskDispatch","taskIndex","removeTaskDispatch","doneTaskDispatch","bucketSelection","index","bucketElements","buckets","state","todoListElement","selectedBucketObject","TODO_ACTIONS","addTask","doneTask","removeTask","withRouter","connect","todoReducer","dispatch","data","App","path","exact","initialState","combineReducers","action","task","taskBucket","push","splice","middlewares","thunkMiddleware","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","rootReducer","persistedStore","createStore","applyMiddleware","persistor","persistStore","Provider","children","isServer","store","loading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20a633ed.chunk.js","sourcesContent":["import React from 'react';\n\nexport class InputForm extends React.Component {\n    \n    componentDidMount() {\n        this.refs.itemName.focus();\n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        var newItemValue = this.refs.itemName.value;\n\n        if (newItemValue) {\n            const { onValueChange } = this.props;\n            onValueChange(newItemValue);\n            this.refs.form.reset();\n        }\n    }\n\n    render() {\n        const { buttonText } = this.props;\n\n        return (\n            <form ref=\"form\" className=\"input-form input-form-inline\" onSubmit={this.onSubmit}>\n                <input type=\"text\" placeholder=\"Enter Name\" ref=\"itemName\" className=\"form-control text\" />\n                <button type=\"submit\" className=\"btn btn-default submit\">{buttonText}</button>\n            </form>\n        )\n    }\n}","import React from 'react';\n\nexport function Tasks({\n    items,\n    bucketIndex,\n    markTodoDone,\n    removeItem,\n}) {\n    const itemsElement = items.map((item, i) => {\n        var todoClass = item.done ?\n            \"done\" : \"undone\";\n\n        return (\n            <li className=\"list-group-item m10\" key={i}>\n                <div className={todoClass}>\n                    <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={() => {\n                        markTodoDone(i, bucketIndex);\n                    }}>\n                    </span>\n                    {item.value}\n                    <div className = \"taskDeleteParent\">\n                        <span class=\"glyphicon glyphicon-remove\" onClick={() => {\n                            removeItem(i, bucketIndex);\n                        }}>\n                        </span>\n                    </div>\n                </div>\n            </li>\n        );\n    })\n\n    return (\n        <ul className=\"list-group\"> {itemsElement} </ul>\n    );\n}","import React from 'react';\nimport { InputForm } from './InputForm';\nimport { Tasks } from './Tasks';\n\nexport function TodoList({\n    bucket,\n    addItem,\n    removeItem,\n    markTodoDone,\n    bucketIndex,\n}) {\n\n    return (\n        <div id=\"todo-bucket\">\n            <InputForm buttonText='Create Task' onValueChange={addItem} />\n            <Tasks\n                items={bucket.items}\n                removeItem={removeItem}\n                markTodoDone={markTodoDone}\n                bucketIndex={bucketIndex}\n            />\n        </div>\n    )\n}","import React,{Component} from 'react';\nimport { TodoList } from './TodoList';\nimport { InputForm } from './InputForm';\n\nclass TodoBucket extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            selectedBucketIndex: 0\n        }\n    }\n\n    addBucket = (bucketName) => {\n        if (!bucketName) {\n            return;\n        }\n        this.props.addBucketDispatch({ name: bucketName })\n        this.setState({ selectedBucketIndex: 0 })\n    }\n\n    addItem = (value, bucketIndex) => {\n        this.props.addTaskDispatch({ value, bucketIndex })\n    }\n\n    removeItem = (taskIndex, bucketIndex) => {\n        this.props.removeTaskDispatch({ taskIndex, bucketIndex })\n    }\n\n    markTodoDone = (taskIndex, bucketIndex) => {\n        this.props.doneTaskDispatch({ taskIndex, bucketIndex })\n    }\n\n    bucketSelection = (index) => {\n        this.setState({\n          selectedBucketIndex: index\n        })\n    }\n\n    bucketElements = () => {\n        return (\n            <ul className=\"list-group\">\n            {\n                this.props.buckets.map((bucket, i) => {\n                    return <li key= {i} onClick={() => this.bucketSelection(i)} className={`list-group-item bucket-items ${ this.state. selectedBucketIndex == i ? 'selected' : ''}` }> {bucket.name}</li>;\n                })\n            }\n            </ul>\n        )\n    }\n\n    todoListElement = () => {\n\n        const selectedBucketObject = this.props.buckets[this.state.selectedBucketIndex];\n\n        if(selectedBucketObject){\n            return(\n                <TodoList\n                    key={selectedBucketObject.name + this.state.selectedBucketIndex}\n                    bucket={selectedBucketObject}\n                    addItem={(value) => {\n                        this.addItem(value, this.state.selectedBucketIndex)\n                    }}\n                    removeItem={this.removeItem}\n                    markTodoDone={this.markTodoDone}\n                    bucketIndex={this.state.selectedBucketIndex}\n                />\n            )\n        }\n        return null;\n    }\n\n    render() {\n\n        return (\n            <div className=\"main\">\n                <div className=\"left\">\n                    <center><h1> Buckets </h1></center>\n                    <div className=\"input-form-inline\">\n                        <InputForm buttonText='Create Bucket' onValueChange={this.addBucket} />\n                    </div>\n                    <div>\n                        {this.bucketElements()}\n                    </div>\n                </div>\n                <div className=\"right\">\n                    <center><h1> Tasks </h1></center>\n                    {this.todoListElement()}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TodoBucket;","\nexport const TODO_ACTIONS = {\n    ADD_BUCKET\t : 'ADD_BUCKET',\n    ADD_TASK\t : 'ADD_TASK',\n    REMOVE_TASK  : 'REMOVE_TASK',\n    DONE_TASK\t : 'DONE_TASK',\n}","\nimport { TODO_ACTIONS } from '../constants/actionTypes';\n\nexport const addBucket = ({ name }) => ({\n    type: TODO_ACTIONS.ADD_BUCKET,\n    name,\n})\n\nexport const addTask = ({ value, bucketIndex }) => ({\n    type: TODO_ACTIONS.ADD_TASK,\n    value,\n    bucketIndex,\n})\n\nexport const doneTask = ({ taskIndex, bucketIndex }) => ({\n    type: TODO_ACTIONS.DONE_TASK,\n    taskIndex,\n    bucketIndex,\n})\n\nexport const removeTask = ({ taskIndex, bucketIndex }) => ({\n    type: TODO_ACTIONS.REMOVE_TASK,\n    taskIndex,\n    bucketIndex,\n})\n\nexport default {\n    addBucket,\n    addTask,\n    doneTask,\n    removeTask,\n}","import { connect }          from 'react-redux';\nimport { withRouter }       from 'react-router-dom';\nimport TodoBucket           from '../components/TodoBucket';\n\nimport {\n    addBucket,\n    addTask,\n    doneTask,\n    removeTask\n}                           from '../actions';\n\n\nconst TodoContainer = props => {\n    return <TodoBucket {...props} />\n};\n\nconst mapStateToProps = state => {\n\n    const { todoReducer } = state;\n\n    return {\n        buckets : todoReducer.buckets\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n\n    addBucketDispatch(data){\n        dispatch(addBucket(data));\n    },\n\n    addTaskDispatch(data){\n        dispatch(addTask(data));\n    },\n\n    doneTaskDispatch(data){\n        dispatch(doneTask(data));\n    },\n\n    removeTaskDispatch(data){\n        dispatch(removeTask(data));\n    },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(TodoContainer));","import React from 'react';\nimport { BrowserRouter,Switch, Route } from 'react-router-dom';\nimport TodoContainer from '../containers/TodoContainer';\nimport './App.css';\n\nconst App = () => {\n\t  return (\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" exact>\n                      <TodoContainer />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n    )\n}\n\nexport default App;","import { TODO_ACTIONS } from '../constants/actionTypes';\n\nconst initialState = {\n    buckets: []\n};\n\nexport default function (state = initialState, action) {\n\n    switch (action.type) {\n\n        case TODO_ACTIONS.ADD_BUCKET: {\n\n            return {\n                ...state,\n                buckets : [{ name: action.name, items: [] }, ...state.buckets]\n            }\n        }\n\n        case TODO_ACTIONS.ADD_TASK: {\n\n            const { buckets } = state;\n            \n            const task = {\n                done    : false,\n                value   : action.value,\n            }\n\n            const taskBucket = { ...buckets[action.bucketIndex] }\n            taskBucket.items.push(task);\n\n            buckets[action.bucketIndex] = taskBucket;\n\n            return {\n                ...state,\n                buckets : [...buckets]\n            }\n        }\n\n        case TODO_ACTIONS.REMOVE_TASK: {\n\n            const { buckets } = state;\n\n            const taskBucket = buckets[action.bucketIndex];\n\n            taskBucket.items.splice(action.taskIndex, 1);\n\n            buckets[action.bucketIndex] = taskBucket;\n\n            return {\n                ...state,\n                buckets : [...buckets]\n            }\n        }\n\n        case TODO_ACTIONS.DONE_TASK: {\n\n            const { buckets } = state;\n\n            const taskBucket = buckets[action.bucketIndex];\n\n            const item = taskBucket.items[action.taskIndex];\n            item.done  = !item.done;\n\n            return {\n                ...state,\n                buckets : [...buckets]\n            }\n        }\n\n        default:\n            return state;\n    }\n};","import { combineReducers } from 'redux';\n\nimport todoReducer from './todoReducer';\nimport storage from 'redux-persist/lib/storage';\n\nexport default combineReducers({\n  \ttodoReducer\n});","import {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers/rootReducer';\nimport { persistStore,persistReducer } from 'redux-persist';\nimport { createLogger } from 'redux-logger';\nimport storage from 'redux-persist/lib/storage';\n\nconst middlewares = [];\n\nif(process.env.NODE_ENV === 'development') {\n  \n  const logger = createLogger({\n    collapsed: true,\n    duration: true\n  });\n  middlewares.push(logger);\n}\n\nmiddlewares.push(thunkMiddleware);\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['todoReducer']\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst persistedStore = createStore(\n  persistedReducer,\n  applyMiddleware(...middlewares)\n);\n\nconst persistor = persistStore(persistedStore);\n\nexport { persistedStore, persistor };","import React from 'react';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistedStore, persistor } from '../store';\n\nconst Provider = ({ children, isServer }) => (\n  <ReduxProvider store={persistedStore}>\n    <PersistGate loading={isServer ? children : null} persistor={persistor}>\n      {children}\n    </PersistGate>\n  </ReduxProvider>\n);\n\nexport default Provider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport Provider from './provider';\n\nReactDOM.render(\n  <Provider>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}